### >>> artinya baris yang di ekskusi oleh aplikasi python secara langsung 

# EXCEPTION HANDLING : mencengah code dan skrip dari kerusakan, dapat juga digunakan untuk handling user input
>>> x = 5 + 'ham'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unsupported operand type(s) for +: 'int' and 'str'
# contoh tanya handling error, seperti diatas

# TRY : 'try' to execute code dibawah, mungkin dapat digunakan dimana saja yang membutuhkan keyboard input.
# EXCEPT : menangkap semua error atau dapat hanya menangkap sebuah pesan error yang spesifik, mungkin dapat digunakan dimana saja yang membutuhkan keyboard input.
>>> try:
...     x = 5 + 'ham'
... except:
...     print "ada kesalahan"
... 
ada kesalahan
# setelah kita gunakan try dan except kita dapat buat pesan debug pada baris yang bermasalah

# PASS : abaikan dan lanjutkan baris skrip tanpa ada break pada coding, mungkin digunakan untuk for,while,
>>> try:
...     x = 5 + 'ham'
... except:
...     pass
... 

# skrip tetap dilanjutkan walapun ada error/break

# RAISE : force sebuah error to occur, bentuknya raise TypeError("aduh error nih")
>>> raise TypeError("ada error nih")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: ada error nih

# pada baris error ada bagian yang error tersebut

# FINALLY : mengabaikan error dan lompat ke finally
>>> try:
...     x = 5 + 'ham'
... except ZeroDivisionError:
...     print 'will not see this'
... finally:
...     print 'the final word'
... 
the final word
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
TypeError: unsupported operand type(s) for +: 'int' and 'str'


# QUIZZZ

>>> try:
...     x = 1.0/0.0
... except ZeroDivisionError:
...     print "got it! i'm awesome!"
... finally:
...     raise TypeError("JustKiding!")
... 
got it! i'm awesome!
Traceback (most recent call last):
  File "<stdin>", line 6, in <module>
TypeError: JustKiding!
>>> for a in range(10):
...     if (a %2):
...             pass
...     else:
...             continue
...     print a
... 
1
3
5
7
9

>>> for a in [[1,2,3],[4,5],[6,7]]:
...     for j in a:
...             if( 4 <j <= 6):
...                     print j
... 
5
6

